@page "/students"
@inject HttpClient Http


<PageTitle>My Students</PageTitle>

<h1>My Students</h1>

@if (students == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <QuickGrid Items="@students" Pagination="@pagination">
    <PropertyColumn Property="@(_ => _.StudentId)" Sortable="true" />
    <TemplateColumn Title="Name" SortBy="@sortByName">
        <div class="flex items-center">
            <nobr>
                @context.FirstName @context.LastName
            </nobr>
        </div>
    </TemplateColumn>
    <PropertyColumn Property="@(_ => _.School)" Sortable="true" />
</QuickGrid>
    <Paginator State="@pagination" />
}

@code {
    private IQueryable<Student> students ;

    GridSort<Student> sortByName = GridSort<Student>
    .ByAscending(_ => _.FirstName).ThenAscending(_ => _.LastName);
    private PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    protected override async Task OnInitializedAsync()
    {
        string URL = $"{Constants.SchoolAPIBase}students";
        var response = await Http.GetFromJsonAsync<Student[]>(URL);
        students = response.AsQueryable();
    }
}
